http {
	hostname = "127.0.0.1"
	port = 8989
	admin-port = 2436
}

akka {
	loglevel = "INFO"
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	actor {
		provider = "akka.cluster.ClusterActorRefProvider"
		serialize-messages = on
	}
	remote {
		log-remote-lifecycle-events = off
		netty.tcp {
			hostname = "127.0.0.1"
			port = 0
		}
	}
	cluster {
		seed-nodes = [
			"akka.tcp://swarm@127.0.0.1:2551",
			"akka.tcp://swarm@127.0.0.1:2552"]
		auto-down = on
	}
}
# Settings for the DistributedPubSubExtension
akka.contrib.cluster.pub-sub {
  # Actor name of the mediator actor, /user/distributedPubSubMediator
  name = distributedPubSubMediator
 
  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""
  
  # The routing logic to use for 'Send'
  # Possible values: random, round-robin, consistent-hashing, broadcast
  routing-logic = random
 
  # How often the DistributedPubSubMediator should send out gossip information
  gossip-interval = 1s
 
  # Removed entries are pruned after this duration
  removed-time-to-live = 120s
  
  # Maximum number of elements to transfer in one message when synchronizing the registries.
  # Next chunk will be transferred in next round of gossip. 
  max-delta-elements = 3000
  
}